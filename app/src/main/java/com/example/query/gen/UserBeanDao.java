package com.example.query.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.query.model.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Weekendtime = new Property(2, String.class, "weekendtime", false, "WEEKENDTIME");
        public final static Property Weekennd = new Property(3, String.class, "weekennd", false, "WEEKENND");
        public final static Property Tiems = new Property(4, String.class, "tiems", false, "TIEMS");
        public final static Property Clazz = new Property(5, String.class, "clazz", false, "CLAZZ");
        public final static Property Numer = new Property(6, String.class, "numer", false, "NUMER");
        public final static Property App = new Property(7, String.class, "app", false, "APP");
        public final static Property Classname = new Property(8, String.class, "classname", false, "CLASSNAME");
        public final static Property Teacher = new Property(9, String.class, "teacher", false, "TEACHER");
        public final static Property Pcroom = new Property(10, String.class, "pcroom", false, "PCROOM");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"WEEKENDTIME\" TEXT," + // 2: weekendtime
                "\"WEEKENND\" TEXT," + // 3: weekennd
                "\"TIEMS\" TEXT," + // 4: tiems
                "\"CLAZZ\" TEXT," + // 5: clazz
                "\"NUMER\" TEXT," + // 6: numer
                "\"APP\" TEXT," + // 7: app
                "\"CLASSNAME\" TEXT," + // 8: classname
                "\"TEACHER\" TEXT," + // 9: teacher
                "\"PCROOM\" TEXT);"); // 10: pcroom
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String weekendtime = entity.getWeekendtime();
        if (weekendtime != null) {
            stmt.bindString(3, weekendtime);
        }
 
        String weekennd = entity.getWeekennd();
        if (weekennd != null) {
            stmt.bindString(4, weekennd);
        }
 
        String tiems = entity.getTiems();
        if (tiems != null) {
            stmt.bindString(5, tiems);
        }
 
        String clazz = entity.getClazz();
        if (clazz != null) {
            stmt.bindString(6, clazz);
        }
 
        String numer = entity.getNumer();
        if (numer != null) {
            stmt.bindString(7, numer);
        }
 
        String app = entity.getApp();
        if (app != null) {
            stmt.bindString(8, app);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(10, teacher);
        }
 
        String pcroom = entity.getPcroom();
        if (pcroom != null) {
            stmt.bindString(11, pcroom);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String weekendtime = entity.getWeekendtime();
        if (weekendtime != null) {
            stmt.bindString(3, weekendtime);
        }
 
        String weekennd = entity.getWeekennd();
        if (weekennd != null) {
            stmt.bindString(4, weekennd);
        }
 
        String tiems = entity.getTiems();
        if (tiems != null) {
            stmt.bindString(5, tiems);
        }
 
        String clazz = entity.getClazz();
        if (clazz != null) {
            stmt.bindString(6, clazz);
        }
 
        String numer = entity.getNumer();
        if (numer != null) {
            stmt.bindString(7, numer);
        }
 
        String app = entity.getApp();
        if (app != null) {
            stmt.bindString(8, app);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(10, teacher);
        }
 
        String pcroom = entity.getPcroom();
        if (pcroom != null) {
            stmt.bindString(11, pcroom);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weekendtime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // weekennd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tiems
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clazz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // numer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // app
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // teacher
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // pcroom
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeekendtime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeekennd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTiems(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClazz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNumer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTeacher(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPcroom(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
